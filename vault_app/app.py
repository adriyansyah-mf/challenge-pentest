import os
from flask import Flask, request, render_template, redirect, url_for, session, send_file
import subprocess  # Untuk command injection
import hashlib

app = Flask(__name__)
app.secret_key = 'super_secret_key'

# Simpan username dan password
users = {
    'admin': hashlib.md5(b'adminpassword').hexdigest()
}

# Halaman login
@app.route('/')
def index():
    return render_template('index.html', error='')

@app.route('/login', methods=['POST'])
def login():
    username = request.form['username']
    password = hashlib.md5(request.form['password'].encode()).hexdigest()

    if username in users and users[username] == password:
        session['username'] = username
        return redirect(url_for('dashboard'))
    else:
        return render_template('index.html', error='Invalid credentials')

# Halaman dashboard setelah login
@app.route('/dashboard')
def dashboard():
    if 'username' in session:
        return f"Welcome {session['username']}! <br> <a href='/admin'>Go to Admin Panel</a>"
    return redirect(url_for('index'))

# Admin panel untuk lihat flag (butuh token)
@app.route('/admin', methods=['GET'])
def admin():
    if 'username' not in session:
        return redirect(url_for('index'))

    token = request.args.get('token')
    if token == "secure_token_123":
        return f"Welcome Admin! Here is the secret flag: {open('/app/flag.txt').read()}"
    return "Invalid token."

# File inclusion vulnerability
@app.route('/debug', methods=['GET'])
def debug():
    if 'username' not in session:
        return redirect(url_for('index'))

    file = request.args.get('file')
    if file:
        try:
            return send_file(file)
        except:
            return "Error: File not found."
    return "No file specified."

# Reverse Shell Route (Command Injection)
@app.route('/run', methods=['GET'])
def run():
    if 'username' not in session:
        return redirect(url_for('index'))

    cmd = request.args.get('cmd')
    if cmd:
        try:
            # Eksekusi command yang diberikan
            output = subprocess.check_output(cmd, shell=True).decode('utf-8')
            return f"Command output: {output}"
        except subprocess.CalledProcessError as e:
            return f"Error: {e}"
    return "No command provided."

# Logout
@app.route('/logout')
def logout():
    session.pop('username', None)
    return redirect(url_for('index'))

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
